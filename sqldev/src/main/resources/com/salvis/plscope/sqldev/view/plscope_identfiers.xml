<?xml version="1.0" encoding="UTF-8"?>
<displays>
	<!-- based on https://github.com/PhilippSalvisberg/plscope-utils/blob/master/database/utils/view/plscope_identifiers.sql -->
	<!-- used sys.all_ instead of dba_ -->
	<!-- TODO: fix issues with PL/SQL nodes, no editor shown, list of objectTypes might be wrong -->
	<!-- Use case sensitve result columns including spaces -->
	<display type="editor" style="null" enable="true" connType="Oracle"
		objectType="FUNCTION,MATERIALIZED VIEW,PACKAGE,PACKAGE BODY,PACKAGE_BODY,PACKAGE PARENT,PROCEDURE,TRIGGER,SYNONYM,TABLE,VIEW">
		<name><![CDATA[PL/Scope IDs]]></name>
		<description><![CDATA[]]>
		</description>
		<tooltip><![CDATA[]]>
		</tooltip>
		<drillclass><![CDATA[null]]></drillclass>
		<queries>

			<query minversion="12.2">
				<sql><![CDATA[
WITH
   base_ids AS (
      SELECT owner,
             name,
             signature,
             type,
             object_name,
             object_type,
             usage,
             usage_id,
             line,
             col,
             usage_context_id,
             origin_con_id
        FROM sys.all_identifiers
      UNION ALL
      SELECT owner,
             ':' || NVL(sql_id, type) AS name,  -- intermediate statement marker colon
             signature,
             type,
             object_name,
             object_type,
             'EXECUTE' AS usage, -- new, artificial usage
             usage_id,
             line,
             col,
             usage_context_id,
             origin_con_id
       FROM sys.all_statements
   ),
   ids AS (
      SELECT owner,
             name,
             signature,
             type,
             object_name,
             object_type,
             usage,
             usage_id,
             line,
             col,
             coalesce(
                least(
                   usage_context_id,
                   max(usage_id) over (
                      PARTITION BY owner, object_name, object_type
                      ORDER BY usage_id
                      ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                   )
                ),
                0
             ) AS usage_context_id, -- fix broken hierarchies
             origin_con_id
        FROM base_ids
   ),
   tree AS (
       SELECT ids.owner,
              ids.object_type,
              ids.object_name,
              ids.line,
              ids.col,
              ids.name,
              sys_connect_by_path(ids.name, '/') AS name_path,
              level as path_len,
              ids.type,
              ids.usage,
              ids.signature,
              ids.usage_id,
              ids.usage_context_id,
              ids.origin_con_id
         FROM ids
        START WITH ids.usage_context_id = 0
      CONNECT BY  PRIOR ids.usage_id    = ids.usage_context_id
              AND PRIOR ids.owner       = ids.owner
              AND PRIOR ids.object_type = ids.object_type
              AND PRIOR ids.object_name = ids.object_name
   )
 SELECT tree.owner AS "Owner",
        tree.object_type AS "Object type",
        tree.object_name AS "Object name",
        tree.line AS "Line",
        tree.col aS "Col",
        last_value (
           CASE
              WHEN tree.type in ('PROCEDURE', 'FUNCTION') AND tree.path_len = 2  THEN
                 tree.name
           END
        ) IGNORE NULLS OVER (
           PARTITION BY tree.owner, tree.object_name, tree.object_type
           ORDER BY tree.line, tree.col, tree.path_len
        ) AS "Procedure name",
        last_value (
           CASE 
              WHEN tree.object_type = 'PACKAGE BODY'
                AND tree.type in ('PROCEDURE', 'FUNCTION')
                AND tree.path_len = 2
              THEN
                 CASE tree.usage
                    WHEN 'DECLARATION' THEN
                       'PRIVATE'
                    WHEN 'DEFINITION' THEN
                       'PUBLIC'
                 END
           END
        ) IGNORE NULLS OVER (
           PARTITION BY tree.owner, tree.object_name, tree.object_type 
           ORDER BY tree.line, tree.col, tree.path_len
        ) AS "Procedure scope",
        REPLACE(tree.name, ':', NULL) AS "Name", -- remove intermediate statement marker
        REPLACE(tree.name_path, ':', NULL) AS "Name path", -- remove intermediate statement marker
        tree.path_len AS "Path len",
        tree.type AS "Type",
        tree.usage AS "Usage",
        refs.owner AS "Ref owner",
        refs.object_type AS "Ref object type",
        refs.object_name AS "Ref object name",
        (
           -- this correlated subquery will be evaluated only,
           -- if the column TEXT is selected
           SELECT regexp_replace(src.text, chr(10)||'+$', null) -- remove trailing new line character
             FROM sys.all_source src
            WHERE src.owner = tree.owner
              AND src.type = tree.object_type
              AND src.name = tree.object_name
              AND src.line = tree.line
        ) AS "Text",
        CASE
           WHEN tree.name_path LIKE '%:%' AND tree.usage != 'EXECUTE' THEN
              -- ensure that this is really a child of a statement
              last_value (
                 CASE
                    WHEN tree.usage = 'EXECUTE' THEN
                       tree.type
                 END
              ) IGNORE NULLS OVER (
                 PARTITION BY tree.owner, tree.object_name, tree.object_type
                 ORDER BY tree.line, tree.col, tree.path_len
              )
        END AS "Parent statement type",
        CASE
           WHEN tree.name_path LIKE '%:%' AND tree.usage != 'EXECUTE' THEN
              -- ensure that this is really a child of a statement
              last_value (
                 CASE
                    WHEN tree.usage = 'EXECUTE' THEN
                       tree.signature
                 END
              ) IGNORE NULLS OVER (
                 PARTITION BY tree.owner, tree.object_name, tree.object_type
                 ORDER BY tree.line, tree.col, tree.path_len
              )
        END AS "Parent statement signature",
        CASE 
           WHEN tree.object_type IN ('PACKAGE BODY', 'PROCEDURE', 'FUNCTION', 'TYPE BODY')
              AND tree.usage = 'DECLARATION'
              AND tree.type NOT IN ('LABEL')
           THEN
              CASE
                 WHEN 
                    count(
                       CASE 
                          WHEN tree.usage NOT IN ('DECLARATION', 'ASSIGNMENT') 
                             OR (tree.type IN ('FORMAL OUT', 'FORMAL IN OUT')
                                 AND tree.usage = 'ASSIGNMENT')
                          THEN 
                             1 
                       END
                    ) OVER (
                       PARTITION BY tree.owner, tree.object_name, tree.object_type, tree.signature
                    ) = 0
                 THEN
                    'NO'
                 ELSE
                    'YES'
              END
        END AS "Is used?",
        tree.signature AS "Signature",
        tree.usage_id AS "Usage id",
        tree.usage_context_id AS "Usage context id",
        tree.origin_con_id AS "Origin con id"
   FROM tree
   LEFT JOIN dba_identifiers refs
     ON refs.signature = tree.signature
        AND refs.usage = 'DECLARATION'
  WHERE (
                tree.owner       = :OBJECT_OWNER
            AND tree.object_type = :OBJECT_TYPE 
            AND tree.object_name = :OBJECT_NAME
        )  
     OR (
                refs.owner       = :OBJECT_OWNER
            AND refs.object_type = :OBJECT_TYPE 
            AND refs.object_name = :OBJECT_NAME
        )
  ORDER BY tree.owner, tree.object_type, tree.object_name, tree.line, tree.col
				]]></sql>
			</query>

		</queries>
	</display>
</displays>
